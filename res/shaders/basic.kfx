Shader Basic
{
    Layout
    {
        // Vertex layouts
        Vertex Main
        {
            Binding     0 32 vertex
            Attribute   float3 Position 0 0 0
            Attribute   float2 UV 0 1 12
            Attribute   float3 Normal 0 2 20
        }

        UniformBuffer GlobalUniformBuffer
        {
            mat4   Projection;
            mat4   View;
            float3 LightPosition;
            float4 LightColor;
            float3 CameraPosition;
        }

        // Our Material Data
        UniformBuffer LocalUniformBuffer
        {
            float4  DiffuseColor;
            float3  Ambient;
            float3  Diffuse;
            float3  Specular;
            float   Shininess;
        }

        // Resources: Uniform buffers, samplers, etc
        Resource Main
        {
            UniformBuffer LocalUniformBuffer    Stage(Fragment) Binding(0) Size(56);
            Sampler       DiffuseSampler        Stage(Fragment) Binding(1);
        }

        // Constant buffers/Push constants
        ConstantBuffer Main
        {
            mat4    Model Stage(Vertex);
        }
    }

    GLSL ToScreen
    {
        #version 450
        #if defined VERTEX

        // Inputs
        layout (location = 0) in vec3 inPosition;
        layout (location = 1) in vec2 inUV;
        layout (location = 2) in vec3 inNormal;

        // Written to; using descriptor sets
        layout (set = 0, binding = 0) uniform GlobalUniformBuffer
        {
            mat4 Projection;
            mat4 View;
            vec3 LightPosition;
            vec4 LightColor;
            vec3 CameraPosition;
        } globalState;

        layout (push_constant) uniform pushConstants
        {
            mat4 Model;
        } variableState;

        // Output from the vertex shader to the fragment shader
        layout(location = 0) out struct DataTransferObject 
        {
            vec2 UV;
            vec3 Normal;
            vec3 FragPosition;
        } outDTO;

        void main()
        {
            outDTO.UV = inUV;
            // outDTO.Normal = inNormal;
            outDTO.Normal = mat3(transpose(inverse(variableState.Model))) * inNormal; // For non-uniform scale
            outDTO.FragPosition = vec3(variableState.Model * vec4(inPosition, 1.0));
            gl_Position = globalState.Projection * globalState.View * variableState.Model * vec4(inPosition, 1.0);
        }

        #endif // VERTEX

        #if defined FRAGMENT

        layout (location = 0) in struct DataTransferObject 
        {
            vec2 UV;
            vec3 Normal;
            vec3 FragPosition;
        } inDTO;

        // Outputs
        layout (location = 0) out vec4 outColor;

        layout (set = 0, binding = 0) uniform GlobalUniformBuffer
        {
            mat4 Projection;
            mat4 View;
            vec3 LightPosition;
            vec4 LightColor;
            vec3 CameraPosition;
        } globalState;

        // Written to; using descriptor sets
        layout(set = 1, binding = 0, std140) uniform LocalUniformBuffer 
        {
            vec4  DiffuseColor;
            vec3  Ambient;
            vec3  Diffuse;
            vec3  Specular;
            float _;
            float Shininess;
        } localUniformBuffer;

        layout(set = 1, binding = 1) uniform sampler2D DiffuseSampler;

        void main() 
        {
            // Ambient
            vec3 ambient = (localUniformBuffer.Ambient * globalState.LightColor.xyz);

            // Diffuse
            vec3 normal = normalize(inDTO.Normal);
            vec3 lightDir = normalize(globalState.LightPosition - inDTO.FragPosition);
            float diff = max(dot(normal, lightDir), 0.0);
            vec3 diffuse = globalState.LightColor.xyz * (diff * localUniformBuffer.Diffuse);

            // Specular
            vec3 viewDir = normalize(globalState.CameraPosition - inDTO.FragPosition);
            vec3 reflectDir = reflect(-lightDir, normal);

            float spec = pow(max(dot(viewDir, reflectDir), 0.0), localUniformBuffer.Shininess);
            vec3 specular = globalState.LightColor.xyz * (spec * localUniformBuffer.Specular);

            outColor = vec4(ambient + diffuse + specular, 1.0) * texture(DiffuseSampler, inDTO.UV);
        }

        #endif // FRAGMENT
    }

    RenderState
    {
        State Default
        {       
            Cull            Off
            ZTest           Less
            ZWrite          On
            Blend           SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
            BlendOp         Add, Add
            PolygonMode     Fill
            LineWidth       1.0   
        }
    }

    Pass ToScreen
    {
        RenderState     Default
        VertexLayout    Main
        Resources       Main
        ConstantBuffer  Main
        VertexShader    ToScreen
        FragmentShader  ToScreen
    }
}